[
    {
        "input": "How does the advice for startup founders to do unscalable tasks compare to relying on launches?",
        "actual_output": null,
        "expected_output": "The advice for startup founders to engage in unscalable tasks emphasizes the importance of direct, hands-on efforts to acquire users, such as manually recruiting them and ensuring a high-quality initial experience. This approach is contrasted with the idea of relying on launches, which are often seen as ineffective for generating sustainable growth. Founders who depend on launches typically underestimate the effort required to build a user base, believing that a big launch will automatically attract users. In reality, successful startups grow from consistent and genuine engagement with their users rather than from a one-time event. Unscalable tasks foster a strong foundation for future growth, while launches tend to offer only a temporary spike in interest without the necessary follow-up engagement.",
        "context": [
            "Want to start a startup? Get funded by Y Combinator.\nJuly 2013\nOne of the most common types of advice we give at Y Combinator\nis to do things that don't scale. A lot of would-be founders believe\nthat startups either take off or don't. You build something, make\nit available, and if you've made a better mousetrap, people beat a\npath to your door as promised. Or they don't, in which case the\nmarket must not exist. [1]\nActually startups take off because the founders make them take\noff. There may be a handful that just grew by themselves, but\nusually it takes some sort of push to get them going. A good\nmetaphor would be the cranks that car engines had before they\ngot electric starters. Once the engine was going, it would keep\ngoing, but there was a separate and laborious process to get it\ngoing.\nRecruit\nThe most common unscalable thing founders have to do at the\nstart is to recruit users manually. Nearly all startups have to. You\ncan't wait for users to come to you. You have to go out and get\nthem.\nStripe is one of the most successful startups we've funded, and\nthe problem they solved was an urgent one. If anyone could have\nsat back and waited for users, it was Stripe. But in fact they're\nfamous within YC for aggressive early user acquisition.\nStartups building things for other startups have a big pool of\npotential users in the other companies we've funded, and none\ntook better advantage of it than Stripe. At YC we use the term\n\"Collison installation\" for the technique they invented. More\ndiffident founders ask \"Will you try our beta?\" and if the answer is\nyes, they say \"Great, we'll send you a link.\" But the Collison\nbrothers weren't going to wait. When anyone agreed to try Stripe\nthey'd say \"Right then, give me your laptop\" and set them up on\nthe spot.\nThere are two reasons founders resist going out and recruiting\nusers individually. One is a combination of shyness and laziness.\nThey'd rather sit at home writing code than go out and talk to a\nbunch of strangers and probably be rejected by most of them.\nBut for a startup to succeed, at least one founder (usually the\nCEO) will have to spend a lot of time on sales and marketing. [2]\nThe other reason founders ignore this path is that the absolute\nnumbers seem so small at first. This can't be how the big, famous\nstartups got started, they think. The mistake they make is to\nunderestimate the power of compound growth. We encourage\nevery startup to measure their progress by weekly growth rate. If\nyou have 100 users, you need to get 10 more next week to grow\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 1/9",
            "started are not merely a necessary evil, but change the company\npermanently for the better. If you have to be aggressive about\nuser acquisition when you're small, you'll probably still be\naggressive when you're big. If you have to manufacture your own\nhardware, or use your software on users's behalf, you'll learn\nthings you couldn't have learned otherwise. And most\nimportantly, if you have to work hard to delight users when you\nonly have a handful of them, you'll keep doing it when you have a\nlot.\nNotes\n[1] Actually Emerson never mentioned mousetraps specifically. He\nwrote \"If a man has good corn or wood, or boards, or pigs, to\nsell, or can make better chairs or knives, crucibles or church\norgans, than anybody else, you will find a broad hard-beaten road\nto his house, though it be in the woods.\"\n[2] Thanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou. You have to do sales yourself initially. Later you can hire a\nreal salesperson to replace you.\n[3] The reason this works is that as you get bigger, your size\nhelps you grow. Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"\n[4] One of the more subtle ways in which YC can help founders is\nby calibrating their ambitions, because we know exactly how a lot\nof successful startups looked when they were just getting started.\n[5] If you're building something for which you can't easily get a\nsmall set of users to observe — e.g. enterprise software — and in\na domain where you have no connections, you'll have to rely on\ncold calls and introductions. But should you even be working on\nsuch an idea?\n[6] Garry Tan pointed out an interesting trap founders fall into in\nthe beginning. They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers. This seems to them more \"professional.\" Actually it's better\nto embrace the fact that you're small and use whatever\nadvantages that brings.\n[7] Your user model almost couldn't be perfectly accurate,\nbecause users' needs often change in response to what you build\nfor them. Build them a microcomputer, and suddenly they need to\nrun spreadsheets on it, because the arrival of your new\nmicrocomputer causes someone to invent the spreadsheet.\n[8] If you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to pick\nthe former, because those are probably the early adopters. They'll\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 8/9",
            "Big\nI should mention one sort of initial tactic that usually doesn't\nwork: the Big Launch. I occasionally meet founders who seem to\nbelieve startups are projectiles rather than powered aircraft, and\nthat they'll make it big if and only if they're launched with\nsufficient initial velocity. They want to launch simultaneously in 8\ndifferent publications, with embargoes. And on a tuesday, of\ncourse, since they read somewhere that's the optimum day to\nlaunch something.\nIt's easy to see how little launches matter. Think of some\nsuccessful startups. How many of their launches do you\nremember? All you need from a launch is some initial core of\nusers. How well you're doing a few months later will depend more\non how happy you made those users than how many there were\nof them. [10]\nSo why do founders think launches matter? A combination of\nsolipsism and laziness. They think what they're building is so\ngreat that everyone who hears about it will immediately sign up.\nPlus it would be so much less work if you could get users merely\nby broadcasting your existence, rather than recruiting them one\nat a time. But even if what you're building really is great, getting\nusers will always be a gradual process — partly because great\nthings are usually also novel, but mainly because users have\nother things to think about.\nPartnerships too usually don't work. They don't work for startups\nin general, but they especially don't work as a way to get growth\nstarted. It's a common mistake among inexperienced founders to\nbelieve that a partnership with a big company will be their big\nbreak. Six months later they're all saying the same thing: that\nwas way more work than we expected, and we ended up getting\npractically nothing out of it. [11]\nIt's not enough just to do something extraordinary initially. You\nhave to make an extraordinary effort initially. Any strategy that\nomits the effort — whether it's expecting a big launch to get you\nusers, or a big partner — is ipso facto suspect.\nVector\nThe need to do something unscalably laborious to get started is\nso nearly universal that it might be a good idea to stop thinking\nof startup ideas as scalars. Instead we should try thinking of\nthem as pairs of what you're going to build, plus the unscalable\nthing(s) you're going to do initially to get the company going.\nIt could be interesting to start viewing startup ideas this way,\nbecause now that there are two components you can try to be\nimaginative about the second as well as the first. But in most\ncases the second component will be what it usually is — recruit\nusers manually and give them an overwhelmingly good\nexperience — and the main benefit of treating startups as vectors\nwill be to remind founders they need to work hard in two\ndimensions. [12]\nIn the best case, both components of the vector contribute to\nyour company's DNA: the unscalable things you have to do to get\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 7/9"
        ],
        "source_file": "D:\\RAGOps-Workspace\\RAGOps-Suite\\ragbench\\deep_eval\\data\\test_documents\\paul.txt"
    },
    {
        "input": "How does the concept of 'insanely great' differ between user experience and product design?",
        "actual_output": null,
        "expected_output": "The concept of 'insanely great' emphasizes different aspects in user experience compared to product design. In the context of product design, particularly for established companies like Apple during Steve Jobs' time, 'insanely great' refers to the high-quality execution and aesthetic of the product itself—design, manufacturing, and packaging. \n\nHowever, for early-stage startups, focusing on user experience takes precedence. Here, 'insanely great' translates into providing an exceptional experience for users, even with a product that may be incomplete or buggy. It's about attentively engaging with users, gathering feedback, and delighting them through personalized interactions, which fosters growth and ultimately leads to product improvement. Thus, while product design centers on robustness and elegance, user experience prioritizes attentiveness and happiness, especially in the startup phase.",
        "context": [
            "Experience\nI was trying to think of a phrase to convey how extreme your\nattention to users should be, and I realized Steve Jobs had\nalready done it: insanely great. Steve wasn't just using \"insanely\"\nas a synonym for \"very.\" He meant it more literally — that one\nshould focus on quality of execution to a degree that in everyday\nlife would be considered pathological.\nAll the most successful startups we've funded have, and that\nprobably doesn't surprise would-be founders. What novice\nfounders don't get is what insanely great translates to in a larval\nstartup. When Steve Jobs started using that phrase, Apple was\nalready an established company. He meant the Mac (and its\ndocumentation and even packaging — such is the nature of\nobsession) should be insanely well designed and manufactured.\nThat's not hard for engineers to grasp. It's just a more extreme\nversion of designing a robust and elegant product.\nWhat founders have a hard time grasping (and Steve himself\nmight have had a hard time grasping) is what insanely great\nmorphs into as you roll the time slider back to the first couple\nmonths of a startup's life. It's not the product that should be\ninsanely great, but the experience of being your user. The product\nis just one component of that. For a big company it's necessarily\nthe dominant one. But you can and should give users an insanely\ngreat experience with an early, incomplete, buggy product, if you\nmake up the difference with attentiveness.\nCan, perhaps, but should? Yes. Over-engaging with early users is\nnot just a permissible technique for getting growth rolling. For\nmost successful startups it's a necessary part of the feedback\nloop that makes the product good. Making a better mousetrap is\nnot an atomic operation. Even if you start the way most\nsuccessful startups have, by building something you yourself\nneed, the first thing you build is never quite right. And except in\ndomains with big penalties for making mistakes, it's often better\nnot to aim for perfection initially. In software, especially, it usually\nworks best to get something in front of users as soon as it has a\nquantum of utility, and then see what they do with it.\nPerfectionism is often an excuse for procrastination, and in any\ncase your initial model of users is always inaccurate, even if\nyou're one of them. [7]\nThe feedback you get from engaging directly with your earliest\nusers will be the best you ever get. When you're so big you have\nto resort to focus groups, you'll wish you could go over to your\nusers' homes and offices and watch them use your stuff like you\ndid when there were only a handful of them.\nFire\nSometimes the right unscalable trick is to focus on a deliberately\nnarrow market. It's like keeping a fire contained at first to get it\nreally hot before adding more logs.\nThat's what Facebook did. At first it was just for Harvard\nstudents. In that form it only had a potential market of a few\nthousand people, but because they felt it was really for them, a\ncritical mass of them signed up. After Facebook stopped being for\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 4/9",
            "started are not merely a necessary evil, but change the company\npermanently for the better. If you have to be aggressive about\nuser acquisition when you're small, you'll probably still be\naggressive when you're big. If you have to manufacture your own\nhardware, or use your software on users's behalf, you'll learn\nthings you couldn't have learned otherwise. And most\nimportantly, if you have to work hard to delight users when you\nonly have a handful of them, you'll keep doing it when you have a\nlot.\nNotes\n[1] Actually Emerson never mentioned mousetraps specifically. He\nwrote \"If a man has good corn or wood, or boards, or pigs, to\nsell, or can make better chairs or knives, crucibles or church\norgans, than anybody else, you will find a broad hard-beaten road\nto his house, though it be in the woods.\"\n[2] Thanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou. You have to do sales yourself initially. Later you can hire a\nreal salesperson to replace you.\n[3] The reason this works is that as you get bigger, your size\nhelps you grow. Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"\n[4] One of the more subtle ways in which YC can help founders is\nby calibrating their ambitions, because we know exactly how a lot\nof successful startups looked when they were just getting started.\n[5] If you're building something for which you can't easily get a\nsmall set of users to observe — e.g. enterprise software — and in\na domain where you have no connections, you'll have to rely on\ncold calls and introductions. But should you even be working on\nsuch an idea?\n[6] Garry Tan pointed out an interesting trap founders fall into in\nthe beginning. They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers. This seems to them more \"professional.\" Actually it's better\nto embrace the fact that you're small and use whatever\nadvantages that brings.\n[7] Your user model almost couldn't be perfectly accurate,\nbecause users' needs often change in response to what you build\nfor them. Build them a microcomputer, and suddenly they need to\nrun spreadsheets on it, because the arrival of your new\nmicrocomputer causes someone to invent the spreadsheet.\n[8] If you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to pick\nthe former, because those are probably the early adopters. They'll\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 8/9",
            "make a more deliberate effort to locate the most promising vein\nof users. The usual way to do that is to get some initial set of\nusers by doing a comparatively untargeted launch, and then to\nobserve which kind seem most enthusiastic, and seek out more\nlike them. For example, Ben Silbermann noticed that a lot of the\nearliest Pinterest users were interested in design, so he went to a\nconference of design bloggers to recruit users, and that worked\nwell. [5]\nDelight\nYou should take extraordinary measures not just to acquire users,\nbut also to make them happy. For as long as they could (which\nturned out to be surprisingly long), Wufoo sent each new user a\nhand-written thank you note. Your first users should feel that\nsigning up with you was one of the best choices they ever made.\nAnd you in turn should be racking your brains to think of new\nways to delight them.\nWhy do we have to teach startups this? Why is it counterintuitive\nfor founders? Three reasons, I think.\nOne is that a lot of startup founders are trained as engineers, and\ncustomer service is not part of the training of engineers. You're\nsupposed to build things that are robust and elegant, not be\nslavishly attentive to individual users like some kind of\nsalesperson. Ironically, part of the reason engineering is\ntraditionally averse to handholding is that its traditions date from\na time when engineers were less powerful — when they were only\nin charge of their narrow domain of building things, rather than\nrunning the whole show. You can be ornery when you're Scotty,\nbut not when you're Kirk.\nAnother reason founders don't focus enough on individual\ncustomers is that they worry it won't scale. But when founders of\nlarval startups worry about this, I point out that in their current\nstate they have nothing to lose. Maybe if they go out of their way\nto make existing users super happy, they'll one day have too\nmany to do so much for. That would be a great problem to have.\nSee if you can make it happen. And incidentally, when it does,\nyou'll find that delighting customers scales better than you\nexpected. Partly because you can usually find ways to make\nanything scale more than you would have predicted, and partly\nbecause delighting customers will by then have permeated your\nculture.\nI have never once seen a startup lured down a blind alley by\ntrying too hard to make their initial users happy.\nBut perhaps the biggest thing preventing founders from realizing\nhow attentive they could be to their users is that they've never\nexperienced such attention themselves. Their standards for\ncustomer service have been set by the companies they've been\ncustomers of, which are mostly big ones. Tim Cook doesn't send\nyou a hand-written note after you buy a laptop. He can't. But you\ncan. That's one advantage of being small: you can provide a level\nof service no big company can. [6]\nOnce you realize that existing conventions are not the upper\nbound on user experience, it's interesting in a very pleasant way\nto think about how far you could go to delight your users.\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 3/9"
        ],
        "source_file": "D:\\RAGOps-Workspace\\RAGOps-Suite\\ragbench\\deep_eval\\data\\test_documents\\paul.txt"
    },
    {
        "input": "What specific strategies can startups employ to acquire initial users while ensuring exceptional early engagement?",
        "actual_output": null,
        "expected_output": "Startups can employ several specific strategies to acquire initial users and ensure exceptional early engagement:\n\n1. **Untargeted Launch**: Begin with a broad launch to attract a diverse group of early users, then analyze their behaviors and preferences to identify the most enthusiastic segments.\n\n2. **Targeted Outreach**: Once promising user profiles are identified, engage them through targeted outreach. For instance, participating in conferences or online communities relevant to those interests can help recruit more users like them.\n\n3. **Personal Outreach**: Use personalized communication to connect with early adopters. Sending hand-written thank-you notes or personal emails can significantly enhance user satisfaction and loyalty.\n\n4. **Feedback Loop**: Establish a continuous feedback mechanism by directly engaging with users. Ask for their input on product features and their user experience to refine the offering based on real needs.\n\n5. **Focus on Delight**: Go beyond basic customer service by actively seeking ways to delight users. This could include timely support, surprise features, or exclusive content.\n\n6. **Start Narrow**: Focus initially on a specific, niche market to create a sense of exclusivity. This approach helps build a strong sense of community among early users, much like how Facebook initially targeted Harvard students.\n\n7. **Iterate Quickly**: Launch a minimally viable product (MVP) quickly, then iterate based on user feedback. Early users appreciate being a part of the development process, which builds stronger engagement.\n\nBy implementing these strategies, startups can effectively acquire initial users while creating a positive and engaging user experience.",
        "context": [
            "make a more deliberate effort to locate the most promising vein\nof users. The usual way to do that is to get some initial set of\nusers by doing a comparatively untargeted launch, and then to\nobserve which kind seem most enthusiastic, and seek out more\nlike them. For example, Ben Silbermann noticed that a lot of the\nearliest Pinterest users were interested in design, so he went to a\nconference of design bloggers to recruit users, and that worked\nwell. [5]\nDelight\nYou should take extraordinary measures not just to acquire users,\nbut also to make them happy. For as long as they could (which\nturned out to be surprisingly long), Wufoo sent each new user a\nhand-written thank you note. Your first users should feel that\nsigning up with you was one of the best choices they ever made.\nAnd you in turn should be racking your brains to think of new\nways to delight them.\nWhy do we have to teach startups this? Why is it counterintuitive\nfor founders? Three reasons, I think.\nOne is that a lot of startup founders are trained as engineers, and\ncustomer service is not part of the training of engineers. You're\nsupposed to build things that are robust and elegant, not be\nslavishly attentive to individual users like some kind of\nsalesperson. Ironically, part of the reason engineering is\ntraditionally averse to handholding is that its traditions date from\na time when engineers were less powerful — when they were only\nin charge of their narrow domain of building things, rather than\nrunning the whole show. You can be ornery when you're Scotty,\nbut not when you're Kirk.\nAnother reason founders don't focus enough on individual\ncustomers is that they worry it won't scale. But when founders of\nlarval startups worry about this, I point out that in their current\nstate they have nothing to lose. Maybe if they go out of their way\nto make existing users super happy, they'll one day have too\nmany to do so much for. That would be a great problem to have.\nSee if you can make it happen. And incidentally, when it does,\nyou'll find that delighting customers scales better than you\nexpected. Partly because you can usually find ways to make\nanything scale more than you would have predicted, and partly\nbecause delighting customers will by then have permeated your\nculture.\nI have never once seen a startup lured down a blind alley by\ntrying too hard to make their initial users happy.\nBut perhaps the biggest thing preventing founders from realizing\nhow attentive they could be to their users is that they've never\nexperienced such attention themselves. Their standards for\ncustomer service have been set by the companies they've been\ncustomers of, which are mostly big ones. Tim Cook doesn't send\nyou a hand-written note after you buy a laptop. He can't. But you\ncan. That's one advantage of being small: you can provide a level\nof service no big company can. [6]\nOnce you realize that existing conventions are not the upper\nbound on user experience, it's interesting in a very pleasant way\nto think about how far you could go to delight your users.\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 3/9",
            "Experience\nI was trying to think of a phrase to convey how extreme your\nattention to users should be, and I realized Steve Jobs had\nalready done it: insanely great. Steve wasn't just using \"insanely\"\nas a synonym for \"very.\" He meant it more literally — that one\nshould focus on quality of execution to a degree that in everyday\nlife would be considered pathological.\nAll the most successful startups we've funded have, and that\nprobably doesn't surprise would-be founders. What novice\nfounders don't get is what insanely great translates to in a larval\nstartup. When Steve Jobs started using that phrase, Apple was\nalready an established company. He meant the Mac (and its\ndocumentation and even packaging — such is the nature of\nobsession) should be insanely well designed and manufactured.\nThat's not hard for engineers to grasp. It's just a more extreme\nversion of designing a robust and elegant product.\nWhat founders have a hard time grasping (and Steve himself\nmight have had a hard time grasping) is what insanely great\nmorphs into as you roll the time slider back to the first couple\nmonths of a startup's life. It's not the product that should be\ninsanely great, but the experience of being your user. The product\nis just one component of that. For a big company it's necessarily\nthe dominant one. But you can and should give users an insanely\ngreat experience with an early, incomplete, buggy product, if you\nmake up the difference with attentiveness.\nCan, perhaps, but should? Yes. Over-engaging with early users is\nnot just a permissible technique for getting growth rolling. For\nmost successful startups it's a necessary part of the feedback\nloop that makes the product good. Making a better mousetrap is\nnot an atomic operation. Even if you start the way most\nsuccessful startups have, by building something you yourself\nneed, the first thing you build is never quite right. And except in\ndomains with big penalties for making mistakes, it's often better\nnot to aim for perfection initially. In software, especially, it usually\nworks best to get something in front of users as soon as it has a\nquantum of utility, and then see what they do with it.\nPerfectionism is often an excuse for procrastination, and in any\ncase your initial model of users is always inaccurate, even if\nyou're one of them. [7]\nThe feedback you get from engaging directly with your earliest\nusers will be the best you ever get. When you're so big you have\nto resort to focus groups, you'll wish you could go over to your\nusers' homes and offices and watch them use your stuff like you\ndid when there were only a handful of them.\nFire\nSometimes the right unscalable trick is to focus on a deliberately\nnarrow market. It's like keeping a fire contained at first to get it\nreally hot before adding more logs.\nThat's what Facebook did. At first it was just for Harvard\nstudents. In that form it only had a potential market of a few\nthousand people, but because they felt it was really for them, a\ncritical mass of them signed up. After Facebook stopped being for\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 4/9",
            "started are not merely a necessary evil, but change the company\npermanently for the better. If you have to be aggressive about\nuser acquisition when you're small, you'll probably still be\naggressive when you're big. If you have to manufacture your own\nhardware, or use your software on users's behalf, you'll learn\nthings you couldn't have learned otherwise. And most\nimportantly, if you have to work hard to delight users when you\nonly have a handful of them, you'll keep doing it when you have a\nlot.\nNotes\n[1] Actually Emerson never mentioned mousetraps specifically. He\nwrote \"If a man has good corn or wood, or boards, or pigs, to\nsell, or can make better chairs or knives, crucibles or church\norgans, than anybody else, you will find a broad hard-beaten road\nto his house, though it be in the woods.\"\n[2] Thanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou. You have to do sales yourself initially. Later you can hire a\nreal salesperson to replace you.\n[3] The reason this works is that as you get bigger, your size\nhelps you grow. Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"\n[4] One of the more subtle ways in which YC can help founders is\nby calibrating their ambitions, because we know exactly how a lot\nof successful startups looked when they were just getting started.\n[5] If you're building something for which you can't easily get a\nsmall set of users to observe — e.g. enterprise software — and in\na domain where you have no connections, you'll have to rely on\ncold calls and introductions. But should you even be working on\nsuch an idea?\n[6] Garry Tan pointed out an interesting trap founders fall into in\nthe beginning. They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers. This seems to them more \"professional.\" Actually it's better\nto embrace the fact that you're small and use whatever\nadvantages that brings.\n[7] Your user model almost couldn't be perfectly accurate,\nbecause users' needs often change in response to what you build\nfor them. Build them a microcomputer, and suddenly they need to\nrun spreadsheets on it, because the arrival of your new\nmicrocomputer causes someone to invent the spreadsheet.\n[8] If you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to pick\nthe former, because those are probably the early adopters. They'll\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 8/9"
        ],
        "source_file": "D:\\RAGOps-Workspace\\RAGOps-Suite\\ragbench\\deep_eval\\data\\test_documents\\paul.txt"
    },
    {
        "input": "What specific effects does aggressive user recruitment have on a startup's overall success?",
        "actual_output": null,
        "expected_output": "Aggressive user recruitment has several key effects on a startup's overall success:\n\n1. **Immediate Feedback and Improvement**: By engaging users directly, founders can gather valuable feedback to refine their product early on, leading to better alignment with user needs.\n\n2. **Establishing a User-Centric Culture**: Startups that prioritize user recruitment and satisfaction from the outset develop a culture of customer focus, which continues to resonate as they grow.\n\n3. **Momentum and Growth**: Manual recruitment creates early momentum that can lead to exponential growth as initial users advocate for the product, benefiting from word-of-mouth referrals.\n\n4. **Learning and Adaptation**: Founders gain insights into user behaviors and preferences, helping them adapt their offerings effectively and fostering innovation based on real-world use cases.\n\n5. **Foundation for Scaling**: Engaging users personally during the early stages instills a habit of aggressive user acquisition that can persist as the company gains traction, positioning the startup for sustainable growth.\n\nIn summary, aggressive user recruitment not only accelerates initial traction but also embeds a responsive, growth-oriented mindset within the startup.",
        "context": [
            "Want to start a startup? Get funded by Y Combinator.\nJuly 2013\nOne of the most common types of advice we give at Y Combinator\nis to do things that don't scale. A lot of would-be founders believe\nthat startups either take off or don't. You build something, make\nit available, and if you've made a better mousetrap, people beat a\npath to your door as promised. Or they don't, in which case the\nmarket must not exist. [1]\nActually startups take off because the founders make them take\noff. There may be a handful that just grew by themselves, but\nusually it takes some sort of push to get them going. A good\nmetaphor would be the cranks that car engines had before they\ngot electric starters. Once the engine was going, it would keep\ngoing, but there was a separate and laborious process to get it\ngoing.\nRecruit\nThe most common unscalable thing founders have to do at the\nstart is to recruit users manually. Nearly all startups have to. You\ncan't wait for users to come to you. You have to go out and get\nthem.\nStripe is one of the most successful startups we've funded, and\nthe problem they solved was an urgent one. If anyone could have\nsat back and waited for users, it was Stripe. But in fact they're\nfamous within YC for aggressive early user acquisition.\nStartups building things for other startups have a big pool of\npotential users in the other companies we've funded, and none\ntook better advantage of it than Stripe. At YC we use the term\n\"Collison installation\" for the technique they invented. More\ndiffident founders ask \"Will you try our beta?\" and if the answer is\nyes, they say \"Great, we'll send you a link.\" But the Collison\nbrothers weren't going to wait. When anyone agreed to try Stripe\nthey'd say \"Right then, give me your laptop\" and set them up on\nthe spot.\nThere are two reasons founders resist going out and recruiting\nusers individually. One is a combination of shyness and laziness.\nThey'd rather sit at home writing code than go out and talk to a\nbunch of strangers and probably be rejected by most of them.\nBut for a startup to succeed, at least one founder (usually the\nCEO) will have to spend a lot of time on sales and marketing. [2]\nThe other reason founders ignore this path is that the absolute\nnumbers seem so small at first. This can't be how the big, famous\nstartups got started, they think. The mistake they make is to\nunderestimate the power of compound growth. We encourage\nevery startup to measure their progress by weekly growth rate. If\nyou have 100 users, you need to get 10 more next week to grow\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 1/9",
            "started are not merely a necessary evil, but change the company\npermanently for the better. If you have to be aggressive about\nuser acquisition when you're small, you'll probably still be\naggressive when you're big. If you have to manufacture your own\nhardware, or use your software on users's behalf, you'll learn\nthings you couldn't have learned otherwise. And most\nimportantly, if you have to work hard to delight users when you\nonly have a handful of them, you'll keep doing it when you have a\nlot.\nNotes\n[1] Actually Emerson never mentioned mousetraps specifically. He\nwrote \"If a man has good corn or wood, or boards, or pigs, to\nsell, or can make better chairs or knives, crucibles or church\norgans, than anybody else, you will find a broad hard-beaten road\nto his house, though it be in the woods.\"\n[2] Thanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou. You have to do sales yourself initially. Later you can hire a\nreal salesperson to replace you.\n[3] The reason this works is that as you get bigger, your size\nhelps you grow. Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"\n[4] One of the more subtle ways in which YC can help founders is\nby calibrating their ambitions, because we know exactly how a lot\nof successful startups looked when they were just getting started.\n[5] If you're building something for which you can't easily get a\nsmall set of users to observe — e.g. enterprise software — and in\na domain where you have no connections, you'll have to rely on\ncold calls and introductions. But should you even be working on\nsuch an idea?\n[6] Garry Tan pointed out an interesting trap founders fall into in\nthe beginning. They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers. This seems to them more \"professional.\" Actually it's better\nto embrace the fact that you're small and use whatever\nadvantages that brings.\n[7] Your user model almost couldn't be perfectly accurate,\nbecause users' needs often change in response to what you build\nfor them. Build them a microcomputer, and suddenly they need to\nrun spreadsheets on it, because the arrival of your new\nmicrocomputer causes someone to invent the spreadsheet.\n[8] If you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to pick\nthe former, because those are probably the early adopters. They'll\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 8/9",
            "Big\nI should mention one sort of initial tactic that usually doesn't\nwork: the Big Launch. I occasionally meet founders who seem to\nbelieve startups are projectiles rather than powered aircraft, and\nthat they'll make it big if and only if they're launched with\nsufficient initial velocity. They want to launch simultaneously in 8\ndifferent publications, with embargoes. And on a tuesday, of\ncourse, since they read somewhere that's the optimum day to\nlaunch something.\nIt's easy to see how little launches matter. Think of some\nsuccessful startups. How many of their launches do you\nremember? All you need from a launch is some initial core of\nusers. How well you're doing a few months later will depend more\non how happy you made those users than how many there were\nof them. [10]\nSo why do founders think launches matter? A combination of\nsolipsism and laziness. They think what they're building is so\ngreat that everyone who hears about it will immediately sign up.\nPlus it would be so much less work if you could get users merely\nby broadcasting your existence, rather than recruiting them one\nat a time. But even if what you're building really is great, getting\nusers will always be a gradual process — partly because great\nthings are usually also novel, but mainly because users have\nother things to think about.\nPartnerships too usually don't work. They don't work for startups\nin general, but they especially don't work as a way to get growth\nstarted. It's a common mistake among inexperienced founders to\nbelieve that a partnership with a big company will be their big\nbreak. Six months later they're all saying the same thing: that\nwas way more work than we expected, and we ended up getting\npractically nothing out of it. [11]\nIt's not enough just to do something extraordinary initially. You\nhave to make an extraordinary effort initially. Any strategy that\nomits the effort — whether it's expecting a big launch to get you\nusers, or a big partner — is ipso facto suspect.\nVector\nThe need to do something unscalably laborious to get started is\nso nearly universal that it might be a good idea to stop thinking\nof startup ideas as scalars. Instead we should try thinking of\nthem as pairs of what you're going to build, plus the unscalable\nthing(s) you're going to do initially to get the company going.\nIt could be interesting to start viewing startup ideas this way,\nbecause now that there are two components you can try to be\nimaginative about the second as well as the first. But in most\ncases the second component will be what it usually is — recruit\nusers manually and give them an overwhelmingly good\nexperience — and the main benefit of treating startups as vectors\nwill be to remind founders they need to work hard in two\ndimensions. [12]\nIn the best case, both components of the vector contribute to\nyour company's DNA: the unscalable things you have to do to get\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 7/9"
        ],
        "source_file": "D:\\RAGOps-Workspace\\RAGOps-Suite\\ragbench\\deep_eval\\data\\test_documents\\paul.txt"
    },
    {
        "input": "How do different user delight strategies for startups compare in effectiveness?",
        "actual_output": null,
        "expected_output": "Different user delight strategies for startups can vary significantly in effectiveness, primarily based on the stage of the startup and its goals. Here are some key comparisons:\n\n1. **Personal Touch vs. Scalable Solutions**: Startups that focus on providing a personal touch, such as sending hand-written thank-you notes (as Wufoo did), often create a stronger initial emotional connection with users. This kind of engagement is particularly effective in the early stages when feedback loops are crucial for refining the product.\n\n2. **Narrow Market Focus**: Targeting a specific niche, like Facebook did with Harvard students, can lead to higher user engagement and enthusiasm. This focused approach can create a community feel, making users feel that the product is designed specifically for them, which can enhance loyalty and word-of-mouth growth.\n\n3. **Empathetic User Experience**: Founders who engage directly with their users to understand their needs can create a feedback-rich environment, which is essential for product adjustments. This direct engagement often leads to better product iterations and higher user satisfaction.\n\n4. **Long-term Value vs. Short-term Growth**: While some strategies may yield quick user acquisition, such as aggressive marketing, they may not foster long-term user retention. Conversely, delighting early users through exceptional service can lay the groundwork for sustained growth as these initial users often provide powerful testimonials and referrals.\n\nOverall, the most effective strategies typically combine personal engagement with a focus on a specific user base, creating a balance between immediate feedback and cultivating long-term relationships.",
        "context": [
            "make a more deliberate effort to locate the most promising vein\nof users. The usual way to do that is to get some initial set of\nusers by doing a comparatively untargeted launch, and then to\nobserve which kind seem most enthusiastic, and seek out more\nlike them. For example, Ben Silbermann noticed that a lot of the\nearliest Pinterest users were interested in design, so he went to a\nconference of design bloggers to recruit users, and that worked\nwell. [5]\nDelight\nYou should take extraordinary measures not just to acquire users,\nbut also to make them happy. For as long as they could (which\nturned out to be surprisingly long), Wufoo sent each new user a\nhand-written thank you note. Your first users should feel that\nsigning up with you was one of the best choices they ever made.\nAnd you in turn should be racking your brains to think of new\nways to delight them.\nWhy do we have to teach startups this? Why is it counterintuitive\nfor founders? Three reasons, I think.\nOne is that a lot of startup founders are trained as engineers, and\ncustomer service is not part of the training of engineers. You're\nsupposed to build things that are robust and elegant, not be\nslavishly attentive to individual users like some kind of\nsalesperson. Ironically, part of the reason engineering is\ntraditionally averse to handholding is that its traditions date from\na time when engineers were less powerful — when they were only\nin charge of their narrow domain of building things, rather than\nrunning the whole show. You can be ornery when you're Scotty,\nbut not when you're Kirk.\nAnother reason founders don't focus enough on individual\ncustomers is that they worry it won't scale. But when founders of\nlarval startups worry about this, I point out that in their current\nstate they have nothing to lose. Maybe if they go out of their way\nto make existing users super happy, they'll one day have too\nmany to do so much for. That would be a great problem to have.\nSee if you can make it happen. And incidentally, when it does,\nyou'll find that delighting customers scales better than you\nexpected. Partly because you can usually find ways to make\nanything scale more than you would have predicted, and partly\nbecause delighting customers will by then have permeated your\nculture.\nI have never once seen a startup lured down a blind alley by\ntrying too hard to make their initial users happy.\nBut perhaps the biggest thing preventing founders from realizing\nhow attentive they could be to their users is that they've never\nexperienced such attention themselves. Their standards for\ncustomer service have been set by the companies they've been\ncustomers of, which are mostly big ones. Tim Cook doesn't send\nyou a hand-written note after you buy a laptop. He can't. But you\ncan. That's one advantage of being small: you can provide a level\nof service no big company can. [6]\nOnce you realize that existing conventions are not the upper\nbound on user experience, it's interesting in a very pleasant way\nto think about how far you could go to delight your users.\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 3/9",
            "Experience\nI was trying to think of a phrase to convey how extreme your\nattention to users should be, and I realized Steve Jobs had\nalready done it: insanely great. Steve wasn't just using \"insanely\"\nas a synonym for \"very.\" He meant it more literally — that one\nshould focus on quality of execution to a degree that in everyday\nlife would be considered pathological.\nAll the most successful startups we've funded have, and that\nprobably doesn't surprise would-be founders. What novice\nfounders don't get is what insanely great translates to in a larval\nstartup. When Steve Jobs started using that phrase, Apple was\nalready an established company. He meant the Mac (and its\ndocumentation and even packaging — such is the nature of\nobsession) should be insanely well designed and manufactured.\nThat's not hard for engineers to grasp. It's just a more extreme\nversion of designing a robust and elegant product.\nWhat founders have a hard time grasping (and Steve himself\nmight have had a hard time grasping) is what insanely great\nmorphs into as you roll the time slider back to the first couple\nmonths of a startup's life. It's not the product that should be\ninsanely great, but the experience of being your user. The product\nis just one component of that. For a big company it's necessarily\nthe dominant one. But you can and should give users an insanely\ngreat experience with an early, incomplete, buggy product, if you\nmake up the difference with attentiveness.\nCan, perhaps, but should? Yes. Over-engaging with early users is\nnot just a permissible technique for getting growth rolling. For\nmost successful startups it's a necessary part of the feedback\nloop that makes the product good. Making a better mousetrap is\nnot an atomic operation. Even if you start the way most\nsuccessful startups have, by building something you yourself\nneed, the first thing you build is never quite right. And except in\ndomains with big penalties for making mistakes, it's often better\nnot to aim for perfection initially. In software, especially, it usually\nworks best to get something in front of users as soon as it has a\nquantum of utility, and then see what they do with it.\nPerfectionism is often an excuse for procrastination, and in any\ncase your initial model of users is always inaccurate, even if\nyou're one of them. [7]\nThe feedback you get from engaging directly with your earliest\nusers will be the best you ever get. When you're so big you have\nto resort to focus groups, you'll wish you could go over to your\nusers' homes and offices and watch them use your stuff like you\ndid when there were only a handful of them.\nFire\nSometimes the right unscalable trick is to focus on a deliberately\nnarrow market. It's like keeping a fire contained at first to get it\nreally hot before adding more logs.\nThat's what Facebook did. At first it was just for Harvard\nstudents. In that form it only had a potential market of a few\nthousand people, but because they felt it was really for them, a\ncritical mass of them signed up. After Facebook stopped being for\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 4/9",
            "started are not merely a necessary evil, but change the company\npermanently for the better. If you have to be aggressive about\nuser acquisition when you're small, you'll probably still be\naggressive when you're big. If you have to manufacture your own\nhardware, or use your software on users's behalf, you'll learn\nthings you couldn't have learned otherwise. And most\nimportantly, if you have to work hard to delight users when you\nonly have a handful of them, you'll keep doing it when you have a\nlot.\nNotes\n[1] Actually Emerson never mentioned mousetraps specifically. He\nwrote \"If a man has good corn or wood, or boards, or pigs, to\nsell, or can make better chairs or knives, crucibles or church\norgans, than anybody else, you will find a broad hard-beaten road\nto his house, though it be in the woods.\"\n[2] Thanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou. You have to do sales yourself initially. Later you can hire a\nreal salesperson to replace you.\n[3] The reason this works is that as you get bigger, your size\nhelps you grow. Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"\n[4] One of the more subtle ways in which YC can help founders is\nby calibrating their ambitions, because we know exactly how a lot\nof successful startups looked when they were just getting started.\n[5] If you're building something for which you can't easily get a\nsmall set of users to observe — e.g. enterprise software — and in\na domain where you have no connections, you'll have to rely on\ncold calls and introductions. But should you even be working on\nsuch an idea?\n[6] Garry Tan pointed out an interesting trap founders fall into in\nthe beginning. They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers. This seems to them more \"professional.\" Actually it's better\nto embrace the fact that you're small and use whatever\nadvantages that brings.\n[7] Your user model almost couldn't be perfectly accurate,\nbecause users' needs often change in response to what you build\nfor them. Build them a microcomputer, and suddenly they need to\nrun spreadsheets on it, because the arrival of your new\nmicrocomputer causes someone to invent the spreadsheet.\n[8] If you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to pick\nthe former, because those are probably the early adopters. They'll\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 8/9"
        ],
        "source_file": "D:\\RAGOps-Workspace\\RAGOps-Suite\\ragbench\\deep_eval\\data\\test_documents\\paul.txt"
    },
    {
        "input": "Examine the necessity of real-time user insights for optimizing MVPs in fledgling startups.",
        "actual_output": null,
        "expected_output": "Real-time user insights are crucial for optimizing MVPs (Minimum Viable Products) in fledgling startups. Engaging directly with early users allows founders to gather immediate feedback, which is often the most valuable they will receive. This interaction helps prioritize enhancements, identifies user pain points, and informs iterations that can transform an initial product into one that truly addresses user needs. Given that most startups start with an incomplete or imperfect product, leveraging this feedback loop can lead to more relevant and effective solutions, ensuring that the user experience is prioritized, rather than striving for perfection from the outset.",
        "context": [
            "Experience\nI was trying to think of a phrase to convey how extreme your\nattention to users should be, and I realized Steve Jobs had\nalready done it: insanely great. Steve wasn't just using \"insanely\"\nas a synonym for \"very.\" He meant it more literally — that one\nshould focus on quality of execution to a degree that in everyday\nlife would be considered pathological.\nAll the most successful startups we've funded have, and that\nprobably doesn't surprise would-be founders. What novice\nfounders don't get is what insanely great translates to in a larval\nstartup. When Steve Jobs started using that phrase, Apple was\nalready an established company. He meant the Mac (and its\ndocumentation and even packaging — such is the nature of\nobsession) should be insanely well designed and manufactured.\nThat's not hard for engineers to grasp. It's just a more extreme\nversion of designing a robust and elegant product.\nWhat founders have a hard time grasping (and Steve himself\nmight have had a hard time grasping) is what insanely great\nmorphs into as you roll the time slider back to the first couple\nmonths of a startup's life. It's not the product that should be\ninsanely great, but the experience of being your user. The product\nis just one component of that. For a big company it's necessarily\nthe dominant one. But you can and should give users an insanely\ngreat experience with an early, incomplete, buggy product, if you\nmake up the difference with attentiveness.\nCan, perhaps, but should? Yes. Over-engaging with early users is\nnot just a permissible technique for getting growth rolling. For\nmost successful startups it's a necessary part of the feedback\nloop that makes the product good. Making a better mousetrap is\nnot an atomic operation. Even if you start the way most\nsuccessful startups have, by building something you yourself\nneed, the first thing you build is never quite right. And except in\ndomains with big penalties for making mistakes, it's often better\nnot to aim for perfection initially. In software, especially, it usually\nworks best to get something in front of users as soon as it has a\nquantum of utility, and then see what they do with it.\nPerfectionism is often an excuse for procrastination, and in any\ncase your initial model of users is always inaccurate, even if\nyou're one of them. [7]\nThe feedback you get from engaging directly with your earliest\nusers will be the best you ever get. When you're so big you have\nto resort to focus groups, you'll wish you could go over to your\nusers' homes and offices and watch them use your stuff like you\ndid when there were only a handful of them.\nFire\nSometimes the right unscalable trick is to focus on a deliberately\nnarrow market. It's like keeping a fire contained at first to get it\nreally hot before adding more logs.\nThat's what Facebook did. At first it was just for Harvard\nstudents. In that form it only had a potential market of a few\nthousand people, but because they felt it was really for them, a\ncritical mass of them signed up. After Facebook stopped being for\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 4/9",
            "started are not merely a necessary evil, but change the company\npermanently for the better. If you have to be aggressive about\nuser acquisition when you're small, you'll probably still be\naggressive when you're big. If you have to manufacture your own\nhardware, or use your software on users's behalf, you'll learn\nthings you couldn't have learned otherwise. And most\nimportantly, if you have to work hard to delight users when you\nonly have a handful of them, you'll keep doing it when you have a\nlot.\nNotes\n[1] Actually Emerson never mentioned mousetraps specifically. He\nwrote \"If a man has good corn or wood, or boards, or pigs, to\nsell, or can make better chairs or knives, crucibles or church\norgans, than anybody else, you will find a broad hard-beaten road\nto his house, though it be in the woods.\"\n[2] Thanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou. You have to do sales yourself initially. Later you can hire a\nreal salesperson to replace you.\n[3] The reason this works is that as you get bigger, your size\nhelps you grow. Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"\n[4] One of the more subtle ways in which YC can help founders is\nby calibrating their ambitions, because we know exactly how a lot\nof successful startups looked when they were just getting started.\n[5] If you're building something for which you can't easily get a\nsmall set of users to observe — e.g. enterprise software — and in\na domain where you have no connections, you'll have to rely on\ncold calls and introductions. But should you even be working on\nsuch an idea?\n[6] Garry Tan pointed out an interesting trap founders fall into in\nthe beginning. They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers. This seems to them more \"professional.\" Actually it's better\nto embrace the fact that you're small and use whatever\nadvantages that brings.\n[7] Your user model almost couldn't be perfectly accurate,\nbecause users' needs often change in response to what you build\nfor them. Build them a microcomputer, and suddenly they need to\nrun spreadsheets on it, because the arrival of your new\nmicrocomputer causes someone to invent the spreadsheet.\n[8] If you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to pick\nthe former, because those are probably the early adopters. They'll\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 8/9",
            "make a more deliberate effort to locate the most promising vein\nof users. The usual way to do that is to get some initial set of\nusers by doing a comparatively untargeted launch, and then to\nobserve which kind seem most enthusiastic, and seek out more\nlike them. For example, Ben Silbermann noticed that a lot of the\nearliest Pinterest users were interested in design, so he went to a\nconference of design bloggers to recruit users, and that worked\nwell. [5]\nDelight\nYou should take extraordinary measures not just to acquire users,\nbut also to make them happy. For as long as they could (which\nturned out to be surprisingly long), Wufoo sent each new user a\nhand-written thank you note. Your first users should feel that\nsigning up with you was one of the best choices they ever made.\nAnd you in turn should be racking your brains to think of new\nways to delight them.\nWhy do we have to teach startups this? Why is it counterintuitive\nfor founders? Three reasons, I think.\nOne is that a lot of startup founders are trained as engineers, and\ncustomer service is not part of the training of engineers. You're\nsupposed to build things that are robust and elegant, not be\nslavishly attentive to individual users like some kind of\nsalesperson. Ironically, part of the reason engineering is\ntraditionally averse to handholding is that its traditions date from\na time when engineers were less powerful — when they were only\nin charge of their narrow domain of building things, rather than\nrunning the whole show. You can be ornery when you're Scotty,\nbut not when you're Kirk.\nAnother reason founders don't focus enough on individual\ncustomers is that they worry it won't scale. But when founders of\nlarval startups worry about this, I point out that in their current\nstate they have nothing to lose. Maybe if they go out of their way\nto make existing users super happy, they'll one day have too\nmany to do so much for. That would be a great problem to have.\nSee if you can make it happen. And incidentally, when it does,\nyou'll find that delighting customers scales better than you\nexpected. Partly because you can usually find ways to make\nanything scale more than you would have predicted, and partly\nbecause delighting customers will by then have permeated your\nculture.\nI have never once seen a startup lured down a blind alley by\ntrying too hard to make their initial users happy.\nBut perhaps the biggest thing preventing founders from realizing\nhow attentive they could be to their users is that they've never\nexperienced such attention themselves. Their standards for\ncustomer service have been set by the companies they've been\ncustomers of, which are mostly big ones. Tim Cook doesn't send\nyou a hand-written note after you buy a laptop. He can't. But you\ncan. That's one advantage of being small: you can provide a level\nof service no big company can. [6]\nOnce you realize that existing conventions are not the upper\nbound on user experience, it's interesting in a very pleasant way\nto think about how far you could go to delight your users.\n8/6/24, 11:04 AM Do Things that Don't Scale\nhttps://paulgraham.com/ds.html 3/9"
        ],
        "source_file": "D:\\RAGOps-Workspace\\RAGOps-Suite\\ragbench\\deep_eval\\data\\test_documents\\paul.txt"
    }
]